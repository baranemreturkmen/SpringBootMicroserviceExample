spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/order-service?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false
    username: root
    password: time.sleep
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
  application:
    name: order-service
  main:
    web-application-type: reactive
  zipkin:
    base-url: http://localhost:9411
  sleuth: #Distributed Tracing
    sampler:
      probability: 1.0 #We want to send %100 of the request which we are receiving to our system to zipkin.
  kafka: #Kafka Properties
    bootstrap-servers: localhost:9092
    template:
      default-topic: notificationTopic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: event:com.javaet.orderservice.event.OrderPlacedEvent
  #Whenever receive information from order-service to notification-service spring-boot can't understand that how to map
  #2 different OrderPlacedEvent which has 2 different qualified names. So for that we've to provide mapping type in the
  #producer side also in the consumer side. token value is some random value I decided to event. Now spring boot understand
  #what is the json type mapping of OrderPlacedEvent

server:
  port: 0

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:password@localhost:8761/eureka
    register-with-eureka: true
    fetch-registry: false
  instance:
    instance-id: order-service

ribbon:
  eureka:
    enabled: true

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      #enabled: true
      show-details: always
  #with * actuator will expose all kind of endpoints. By the default it will only expose the health metric endpoints
  #show-details by default never

#Resilinece4j Properties
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        registerHealthIndicator: true #we want to see different kind of states of circuit breaker close, open & half open
        event-consumer-buffer-size: 10
        slidingWindowType: COUNT_BASED #After 5 failing requests circuit breaker will try to change from the close to the open state
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 5s #How much time we can wait in the open state to change half open state
        permittedNumberOfCallsInHalfOpenState: 3 #How many calls we have to allow in the half open state to check communication between order and inventory service
        automaticTransitionFromOpenToHalfOpenEnabled: true #if 3 call fail circuit breaker status will be open
  timelimiter: #Resilience4J Timeout Properties
    instances:
      inventory:
        timeout-duration: 3s #we want to wait maximum 3 seconds before terminating that call and throwing the timeout exception
  retry: #Resilience4J Retry Properties
    instances:
      inventory:
        max-attempts: 3
        wait-duration: 5s #Wait 5 seconds before retrying particular call if we don't receive response in five seconds just retry 3 times
                          #if after 3 times circuit breaker will handle the actual request flow