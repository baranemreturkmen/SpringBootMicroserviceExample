version: "2"

services:
  #Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  #Kafka
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Postgres Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    #If you want to run database usually docker container doesn't store any data inside them.
    #Docker containers are ephemeral(kısa ömürlü) in nature so if you run a docker container
    #and try to create a table, insert a record and if you start a docker container the data
    #will be lost, it won't be persistent so for this reason we want to create sth called as
    #volumes where you can map the data folder inside the docker container in our host
    #Burada bir volume yaratıyorum ve /data/postgres içerisinde ki tüm datalar benim localinde
    #./postgres-order: dosyasında tutulacak.
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431" #default 5432 ama biz 5431 portunda expose etmek istiyoruz.
    ports:
      - "5431:5431"
    command: -p 5431 #postgres 5431 portunda koşmalı diyorum.
    restart: always

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: time.sleep
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    #Farkındaysan default port kullandığı için expose ve command: -p kullanmadık postgres-order'da ki gibi.
    ports:
      - "5432:5432"
    restart: always

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-postgres:
    container_name: keycloak-postgres
    image: postgres:10
    volumes:
      - ./postgres_keycloak_data:/var/lib/postgres
    environment:
      POSTGRES_ROOT_PASSWORD: root
      POSTGRES_DATABASE: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    #If you run import-realm, it'll download automatically this realm information
    #from our host machine to the docker container. So I've exported all this information
    #inside into this json so if you start this container keycloak you don't need to create
    #this realm then the clients one more time everything will be presented at the time of
    #startup
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080" #insideTheContainer:outSideTheContainer
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    #If you want to start keycloak docker compose will make sure that it will start it only after the
    #keycloak postgres container up and running successfully. If for some reason keycloak postgres container
    #is not running or it has some issues it will stop the keycloak container.
    depends_on:
      - keycloak-postgres

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    #tag yaratmadık default'da imagelar ilk docker hub'a yüklenince oluşturulan latest tag'ini kullanıyoruz.
    #baranemreturkmen verdik ilk docker hub'a image yükleme aşamasında istediğin ismi verebilir misin bilmiyorum ben kullanıcı adımı verdim.
    #Docker compose will download this particular image during the at the time of startup and it will try to build this Docker image
    image: baranemreturkmen/discovery-server:latest
    #whenever we try to start up docker compose it will pull this image every time and it will build this image
    pull_policy: always
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      #we're providing profile name as docker.
      #application-docker.yml will be active whenever the profile activated.
      - SPRING_PROFILES_ACTIVE=docker
    #Önce zipkin container'ı ayakta olmalı.
    depends_on:
      - zipkin

  api-gateway:
    image: baranemreturkmen/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080" #api-gateway için 8080 default ama biz bunu keycloak için kullandığımız için değiştirdik.
    expose:
      - "8181"
    #Yine nasıl ki discovery-server için ayrı profil ve yaml oluşturduysak aynı işi api-gateway için de yaptık.
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: baranemreturkmen/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: baranemreturkmen/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      #Ben bu aşağıdaki değer ile application-docker.yml içindeki url'i override edebilirim.
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order-service
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: baranemreturkmen/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: baranemreturkmen/notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway