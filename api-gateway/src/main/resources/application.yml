#API gateway can make a call to this particular url and register itself as a discovery client.
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:password@localhost:8761/eureka

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes[0]: #Product Service Route -> whenever we receive a request with path then apigateway will route this particular request to the product service
        id: product-service #Usually name of the service which you're defining
        uri: lb://product-service #api gateway also acts like a load balance, api gateway will also do some client-side load balancing
             #it'll try to access to the available instance of the product service
        predicates[0]: Path=/api/product
      routes[1]:
        id: order-service #Order Service Route
        uri: lb://order-service
        predicates[0]: Path=/api/order
      routes[2]:
        id: discovery-server #Discovery Server Route
        uri: http://localhost:8761
        predicates[0]: Path=/eureka/web
        filters[0]: SetPath=/
        #Whenever I call this particular URL I want my request to be routed the Eureka server
        #Path=/eureka/web -> http://localhost:8080/eureka/web
        #As we only have one instance of the discovery server it's not able to actually load balance the request to the discovery server.
        #This is not working as there is only one instance so lb -> http
      routes[3]:
        id: discovery-server #Discovery Server Static Resources Route -> JS and CCS files
        uri: http://localhost:8761
        predicates[0]: Path=/eureka/**
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8181/realms/spring-boot-microservices-realm #Just give the issuer-uri spring-boot will read all the openID configuration which include authorization_endpoint and token_endpoint etc.
  zipkin:
    base-url: http://localhost:9411
  sleuth: #Distributed Tracing
    sampler:
      probability: 1.0 #We want to send %100 of the request which we are receiving to our system to zipkin.
#Note That!: We're making a call to the inventory service in a different thread because we're using circuit breaker.
#What circuit breaker essentially do is it will create a new thread from order-service it will make a call inventory service
#in that new thread. Therefore we can't see inventory-service information in zipkin api gateway information page, it will show inside
#the order-service information. If you disable circuit breaker you'll see invertory-service information in api gateway information page also.
#because in this way we're making a call in a single thread without any additional threads so we can trace the request from start to the end.

#increase the logging level
logging:
  level:
    root: INFO
    org: #This is the class responsible to define the routes and also identify the routes for the incoming requests
      springframework:
        cloud:
          gateway: TRACE
            #route:
              #RouteDefinitionLocator: INFO

#FIXME: Find the error on route! Maybe this configuration is not available on spring cloud gateway side anymore?