#API gateway can make a call to this particular url and register itself as a discovery client.
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes[0]: #Product Service Route -> whenever we receive a request with path then apigateway will route this particular request to the product service
        id: product-service #Usually name of the service which you're defining
        uri: lb://product-service #api gateway also acts like a load balance, api gateway will also do some client-side load balancing
             #it'll try to access to the available instance of the product service
        predicates[0]: Path=/api/product
      routes[1]:
        id: order-service #Order Service Route
        uri: lb://order-service
        predicates[0]: Path=/api/order
      routes[2]:
        id: discovery-server #Discovery Server Route
        uri: http://localhost:8761
        predicates[0]: Path=/eureka/web
        filters[0]: SetPath=/
        #Whenever I call this particular URL I want my request to be routed the Eureka server
        #Path=/eureka/web -> http://localhost:8080/eureka/web
        #As we only have one instance of the discovery server it's not able to actually load balance the request to the discovery server.
        #This is not working as there is only one instance so lb -> http
      routes[3]:
        id: discovery-server #Discovery Server Static Resources Route -> JS and CCS files
        uri: http://localhost:8761
        predicates[0]: Path=/eureka/**

#increase the logging level
logging:
  level:
    root: INFO
    org: #This is the class responsible to define the routes and also identify the routes for the incoming requests
      springframework:
        cloud:
          gateway: TRACE
            #route:
              #RouteDefinitionLocator: INFO

#FIXME: Find the error on route! Maybe this configuration is not available on spring cloud gateway side anymore?